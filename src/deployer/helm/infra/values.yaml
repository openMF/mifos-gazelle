# Declare global configurations
global:
  kibanaEnabled: false

############### Kafka and Zookeeper ####################
## Reference: https://github.com/bitnami/charts/blob/main/bitnami/kafka/values.yaml
kafka:
  enabled: true
  fullnameOverride: "kafka"

  persistence:
    enabled: false

  ## https://github.com/bitnami/charts/blob/main/bitnami/zookeeper/values.yaml
  zookeeper:
    persistence:
      enabled: true

    fullnameOverride: "zookeeper"

  ## Kafka provisioning
  provisioning:
    enabled: true
    numPartitions: 1
    replicationFactor: 1

    topics:
    - name: KAFKA_AUDITS_TOPIC
      value: audits
    - name: KAFKA_LOGS_TOPIC
      value: logs
    - name: AccountLookupBcRequests
      value: AccountLookupBcRequests
    - name: AccountLookupBcEvents
      value: AccountLookupBcEvents
    - name: AccountLookupBcResponses
      value: AccountLookupBcResponses
    - name: AccountLookupBcErrors
      value: AccountLookupBcErrors
    - name: OperatorBcErrors
      value: OperatorBcErrors
    - name: QuotingBcErrors
      value: QuotingBcErrors
    - name: QuotingBcEvents
      value: QuotingBcEvents
    - name: QuotingBcRequests
      value: QuotingBcRequests
    - name: SettlementsBcRequests
      value: SettlementsBcRequests
    - name: TransfersBcErrors
      value: TransfersBcErrors
    - name: TransfersBcEvents
      value: TransfersBcEvents
    - name: TransfersBcRequests
      value: TransfersBcRequests
    - name: SettlementsBcEvents
      value: SettlementsBcEvents
    - name: SettlementsBcCommands
      value: SettlementsBcCommands
    - name: PlatformConfigurationBcEvents
      value: PlatformConfigurationBcEvents
    - name: TransfersBcTimeouts
      value: TransfersBcTimeouts
    - name: ParticipantsBcEvents
      value: ParticipantsBcEvents
    - name: SchedulingBcCommands
      value: SchedulingBcCommands
    - name: SchedulingBcEvents
      value: SchedulingBcEvents
    - name: SecurityBcAuthorizationEvents
      value: SecurityBcAuthorizationEvents
    - name: SecurityBcEvents
      value: SecurityBcEvents




    nodeSelector: {}
    tolerations: []
    waitForKafka: true

############### RedPanda Console for Kafka  ####################
# https://artifacthub.io/packages/helm/redpanda-data/console?modal=values
# redpanda kakfa console config

redpanda-console:
  enabled: true
  fullnameOverride: rpconsole

  console:
    config:
      kafka:
        brokers:
          - kafka:9092

  ingress:
    enabled: true
    className: nginx
    hosts:
      - host: redpanda-console.local
        paths:
          - path: /
            pathType: ImplementationSpecific

############### MongoDB  ####################
# https://github.com/bitnami/charts/tree/main/bitnami/mongodb
mongodb:
  enabled: true
  image:
    tag: 5.0.18-debian-11-r8

  fullnameOverride: "mongodb"
  auth:
    enabled: true

    rootUser: root
    rootPassword: mongoDbPas42
    usernames:
    - 'mojaloop'
    passwords:
    - 'password'
    databases:
    - 'mlos'

    replicaSetKey: ""
    existingSecret: ""
  persistence:
    enabled: false

############### Mongo Express ####################
# mongo express config
mongo-express:
  fullnameOverride: mongo-express
  enabled: true

  image:
    tag: 1.0.2

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - host: mongoexpress.local
        paths:
          - /

  mongodbEnableAdmin: true
  mongodbAdminPassword: mongoDbPas42

############### Redis  ####################
## Reference: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  enabled: true
  fullnameOverride: redis
  architecture: standalone
  auth:
    enabled: false
  master:
    disableCommands: []
    persistence:
      enabled: false

############### Elasticsearch and Kibana  ####################
elasticsearch:
  enabled: true
  # fullnameOverride: "elastic"

  security:
    elasticPassword: elasticSearchPas42
    tls:
      restEncryption: false

  coordinating:
    replicaCount: 1

  master:
    replicaCount: 1
    persistence:
      enabled: false

  data:
    replicaCount: 1
    persistence:
      enabled: false

  ingest:
    replicaCount: 1

  ingress:
    enabled: true
    # hostname: es01

kibana:
  enabled: true
  imageTag: 7.16.3
  fullnameOverride: "ph-ee-kibana"
  elasticsearchHosts: "http://ph-ee-elasticsearch:9200/"
  protocol: http
  kibanaConfig:
    kibana.yml: |
      monitoring.enabled: false
      xpack.encryptedSavedObjects.encryptionKey: 5f4dcc3b5aa765d61d8327deb882cf99
      server.ssl:
        enabled: false
        key: /usr/share/kibana/config/certs/elastic-certificate.pem
        certificate: /usr/share/kibana/config/certs/elastic-certificate.pem
      xpack.security.encryptionKey: ${KIBANA_ENCRYPTION_KEY}
      elasticsearch.ssl:
        certificateAuthorities: /usr/share/kibana/config/certs/elastic-certificate.pem
        verificationMode: certificate
  secretMounts:
    - name: elastic-certificate-pem
      secretName: elastic-certificate-pem
      path: /usr/share/kibana/config/certs
  extraEnvs:
    - name: 'ELASTICSEARCH_USERNAME'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: username
    - name: 'ELASTICSEARCH_PASSWORD'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password
    - name: 'KIBANA_ENCRYPTION_KEY'
      valueFrom:
        secretKeyRef:
          name: kibana
          key: encryptionkey

############### MySQL  ####################
mysql:
  fullnameOverride: "mysql"
  enabled: true
  auth:
    database: "tenants"
    username: "mifos"
    password: "password"
    rootPassword: "ethieTieCh8ahv"
    DATASOURCE_URL: jdbc:mysql:thin://operationsmysql:3306/mysql-0
  image:
    tag: "5.7"
    debug: false
  initdbScripts:
    setup.sql: |-
      CREATE DATABASE messagegateway;
      CREATE DATABASE `rhino`;
      CREATE DATABASE `gorilla`;
      CREATE DATABASE `lion`;
      CREATE DATABASE `identity_account_mapper`;
      CREATE DATABASE `voucher_management`;
      GRANT ALL PRIVILEGES ON `rhino`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `gorilla`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `lion`.* TO 'mifos';
      GRANT ALL ON *.* TO 'root'@'%';
      GRANT ALL PRIVILEGES ON messagegateway.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `identity_account_mapper`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `voucher_management`.* TO 'mifos';
      CREATE DATABASE IF NOT EXISTS `fineract_tenants`;
      CREATE DATABASE IF NOT EXISTS `fineract_default`;
      GRANT ALL ON *.* TO 'root'@'%';
      GRANT ALL PRIVILEGES ON `fineract_tenants`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `fineract_default`.* TO 'mifos';
